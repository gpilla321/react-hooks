{"ast":null,"code":"var _jsxFileName = \"/Users/gpilla/Documents/react-concepts/src/memoization/useCallback.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { memo, useCallback, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UseCallbackComponent = () => {\n  _s();\n\n  const [counter, setCounter] = useState(0);\n  const [searchTerm, setSearchTerm] = useState([]);\n  const lookedupTerms = ['test', 'word', 'how', 'to', 'use', 'useCallback', 'hook'];\n  const handleClick = useCallback(value => {\n    setCounter(counter + 1);\n    setSearchTerm([...searchTerm, value]);\n    console.log(counter);\n    console.log(value);\n  }, lookedupTerms);\n\n  const updateTerms = () => {\n    const newTerms = ['new', 'terms', 'will', 'change', 'the', 'function'];\n    lookedupTerms = newTerms;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"useCallback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Times useCallback Changes \", counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCounter(counter + 1),\n      children: \"Increase Counter and update counter me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => updateTerms,\n      children: \"Update Terms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: [\"Words that will not fire a new re-render: \", lookedupTerms.map((term, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [term, \", \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 95\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ChildComponent, {\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UseCallbackComponent, \"K8NulwMkls5nx3zhzJ9y4u6XbZ8=\");\n\n_c = UseCallbackComponent;\n\nconst ChildComponent = /*#__PURE__*/_s2( /*#__PURE__*/memo(_c2 = _s2(_ref => {\n  _s2();\n\n  let {\n    handleClick\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n\n  const handleOnChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => handleOnChange(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleClick(inputValue),\n      children: \"Click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 12\n  }, this);\n}, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\")), \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n\n_c3 = ChildComponent;\nexport default UseCallbackComponent;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"UseCallbackComponent\");\n$RefreshReg$(_c2, \"ChildComponent$memo\");\n$RefreshReg$(_c3, \"ChildComponent\");","map":{"version":3,"names":["memo","useCallback","useState","UseCallbackComponent","counter","setCounter","searchTerm","setSearchTerm","lookedupTerms","handleClick","value","console","log","updateTerms","newTerms","map","term","index","ChildComponent","inputValue","setInputValue","handleOnChange","e","target"],"sources":["/Users/gpilla/Documents/react-concepts/src/memoization/useCallback.js"],"sourcesContent":["import { memo, useCallback, useState } from \"react\";\n\nconst UseCallbackComponent = () => {\n    const [counter, setCounter] = useState(0);\n    const [searchTerm, setSearchTerm] = useState([]);\n    const lookedupTerms = ['test', 'word', 'how', 'to', 'use', 'useCallback', 'hook']\n\n    const handleClick = useCallback((value) => {\n        setCounter(counter + 1)\n        setSearchTerm([...searchTerm, value]);\n\n        console.log(counter)\n        console.log(value)\n    }, lookedupTerms)\n\n    const updateTerms = () => {\n        const newTerms = ['new', 'terms', 'will', 'change', 'the', 'function']\n        lookedupTerms = newTerms;\n    }\n\n\n    return <>\n        <h1>useCallback</h1>\n        <h2>Times useCallback Changes {counter}</h2>\n        <button onClick={() => setCounter(counter + 1)}>Increase Counter and update counter me!</button>\n        <br />\n        <button onClick={() => updateTerms}>Update Terms</button>\n        <br />\n        <br />\n        <strong>Words that will not fire a new re-render: {lookedupTerms.map((term, index) => <span key={index}>{term}, </span>)}</strong>\n        <ChildComponent handleClick={handleClick} />\n    </>\n}\n\nconst ChildComponent = memo(({ handleClick }) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleOnChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    return <div>\n        <input type='text' onChange={(e) => handleOnChange(e)} />\n        <button onClick={() => handleClick(inputValue)}>Click me!</button>\n    </div>\n})\n\nexport default UseCallbackComponent;"],"mappings":";;;;AAAA,SAASA,IAAT,EAAeC,WAAf,EAA4BC,QAA5B,QAA4C,OAA5C;;;;AAEA,MAAMC,oBAAoB,GAAG,MAAM;EAAA;;EAC/B,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC;EACA,MAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAMM,aAAa,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,EAAwB,IAAxB,EAA8B,KAA9B,EAAqC,aAArC,EAAoD,MAApD,CAAtB;EAEA,MAAMC,WAAW,GAAGR,WAAW,CAAES,KAAD,IAAW;IACvCL,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;IACAG,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgBI,KAAhB,CAAD,CAAb;IAEAC,OAAO,CAACC,GAAR,CAAYR,OAAZ;IACAO,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH,CAN8B,EAM5BF,aAN4B,CAA/B;;EAQA,MAAMK,WAAW,GAAG,MAAM;IACtB,MAAMC,QAAQ,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,KAAnC,EAA0C,UAA1C,CAAjB;IACAN,aAAa,GAAGM,QAAhB;EACH,CAHD;;EAMA,oBAAO;IAAA,wBACH;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADG,eAEH;MAAA,yCAA+BV,OAA/B;IAAA;MAAA;MAAA;MAAA;IAAA,QAFG,eAGH;MAAQ,OAAO,EAAE,MAAMC,UAAU,CAACD,OAAO,GAAG,CAAX,CAAjC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHG,eAIH;MAAA;MAAA;MAAA;IAAA,QAJG,eAKH;MAAQ,OAAO,EAAE,MAAMS,WAAvB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALG,eAMH;MAAA;MAAA;MAAA;IAAA,QANG,eAOH;MAAA;MAAA;MAAA;IAAA,QAPG,eAQH;MAAA,yDAAmDL,aAAa,CAACO,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,kBAAiB;QAAA,WAAmBD,IAAnB;MAAA,GAAWC,KAAX;QAAA;QAAA;QAAA;MAAA,QAAnC,CAAnD;IAAA;MAAA;MAAA;MAAA;IAAA,QARG,eASH,QAAC,cAAD;MAAgB,WAAW,EAAER;IAA7B;MAAA;MAAA;MAAA;IAAA,QATG;EAAA,gBAAP;AAWH,CA9BD;;GAAMN,oB;;KAAAA,oB;;AAgCN,MAAMe,cAAc,kCAAGlB,IAAI,WAAC,QAAqB;EAAA;;EAAA,IAApB;IAAES;EAAF,CAAoB;EAC7C,MAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BlB,QAAQ,CAAC,EAAD,CAA5C;;EACA,MAAMmB,cAAc,GAAIC,CAAD,IAAO;IAC1BF,aAAa,CAACE,CAAC,CAACC,MAAF,CAASb,KAAV,CAAb;EACH,CAFD;;EAIA,oBAAO;IAAA,wBACH;MAAO,IAAI,EAAC,MAAZ;MAAmB,QAAQ,EAAGY,CAAD,IAAOD,cAAc,CAACC,CAAD;IAAlD;MAAA;MAAA;MAAA;IAAA,QADG,eAEH;MAAQ,OAAO,EAAE,MAAMb,WAAW,CAACU,UAAD,CAAlC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAIH,CAV0B,kCAAP,iCAApB;;MAAMD,c;AAYN,eAAef,oBAAf"},"metadata":{},"sourceType":"module"}